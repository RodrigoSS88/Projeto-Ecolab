# -*- coding: utf-8 -*-
"""c-pia-de-imers-o-ia-alura-google-gemini-aula-05-agentes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/RodrigoSS88/bd28aabb3b90264d2246821c98765f6d/c-pia-de-imers-o-ia-alura-google-gemini-aula-05-agentes.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install googlemaps

def definir_objetivo():
    """
    Função para definir o propósito do chatbot.

    Esta função guia o usuário através de uma série de perguntas para
    determinar o objetivo principal do chatbot. As opções incluem:
    - Atendimento ao cliente
    - Assistente virtual
    - Geração de leads
    """
    print("Passo 1: Definição do Objetivo do Chatbot")
    print("Qual será a função principal do seu chatbot?")

    opcoes = {
        "1": "Atendimento ao cliente (tirar dúvidas, resolver problemas)",
        "2": "Assistente virtual (agendar compromissos, fornecer informações)",
        "3": "Geração de leads (coletar informações de contato, qualificar clientes)",

    }

    for chave, valor in opcoes.items():
        print(f"{chave}. {valor}")

    while True:
        escolha = input("Digite o número da opção desejada: ")
        if escolha in opcoes:
            return opcoes[escolha]
        else:
            print("Opção inválida. Por favor, digite um número válido.")

def detalhar_objetivo(objetivo):
    """
    Função para detalhar o objetivo escolhido.

    Esta função fornece mais detalhes e exemplos específicos para o
    objetivo selecionado pelo usuário.

    Args:
        objetivo (str): O objetivo principal do chatbot.
    """
    print(f"\nVocê escolheu: {objetivo}")
    print("Por favor, forneça mais detalhes sobre como o chatbot irá realizar este objetivo:")

    if objetivo == "Atendimento ao cliente (tirar dúvidas, resolver problemas)":
        print("Exemplos de como o chatbot pode ser usado para atendimento ao cliente:")
        print("- Esclarecer dúvidas frequentes sobre produtos ou serviços.")
        print("- Fornecer suporte técnico básico.")
        print("- Auxiliar na resolução de problemas e reclamações.")
        print("- Redirecionar para atendentes humanos quando necessário.")
    elif objetivo == "Assistente virtual (agendar compromissos, fornecer informações)":
        print("Exemplos de como o chatbot pode ser usado como assistente virtual:")
        print("- Agendar e confirmar compromissos e reservas.")
        print("- Fornecer informações sobre horários, locais e disponibilidade.")
        print("- Enviar lembretes e notificações.")
        print("- Integrar com calendários e outros sistemas.")
    elif objetivo == "Geração de leads (coletar informações de contato, qualificar clientes)":
        print("Exemplos de como o chatbot pode ser usado para geração de leads:")
        print("- Coletar informações de contato de potenciais clientes.")
        print("- Qualificar leads através de perguntas e interações.")
        print("- Direcionar leads qualificados para a equipe de vendas.")
        print("- Integrar com sistemas de CRM.")


    detalhes = input("Digite seus detalhes aqui: ")
    return detalhes #Retorna os detalhes do objetivo

def definir_publico_alvo():
    """
    Função para definir o público-alvo do chatbot.

    Esta função coleta informações sobre o público que irá interagir
    com o chatbot, incluindo perfil demográfico, necessidades e
    expectativas, e linguagem e tom de voz adequados.
    """
    print("\nPasso 2: Definição do Público-alvo")
    print("Para quem este chatbot está sendo desenvolvido?")

    perfil_demografico = input("Digite o perfil demográfico (idade, localização, interesses, etc.): ")
    necessidades_expectativas = input("Quais são as necessidades e expectativas dos usuários?: ")
    linguagem_tom = input("Qual é a linguagem e tom de voz adequados para o público?: ")

    return {
        "perfil_demografico": perfil_demografico,
        "necessidades_expectativas": necessidades_expectativas,
        "linguagem_tom": linguagem_tom
    }

def main():
    """
    Função principal para executar o script.
    """
    objetivo = definir_objetivo()
    detalhes_objetivo = detalhar_objetivo(objetivo) #Guarda os detalhes do objetivo
    publico_alvo = definir_publico_alvo()

    print("\nResumo da Definição do Projeto:")
    print(f"Objetivo Principal: {objetivo}")
    print(f"Detalhes do Objetivo: {detalhes_objetivo}") #Exibe os detalhes
    print(f"Público-alvo: {publico_alvo}")

if __name__ == "__main__":
    main()

!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

def definir_objetivo(topico, data_de_hoje):

    buscador = Agent(
        name="definir_objetivo",
        model="gemini-2.0-flash",
        instruction="""
        Você é um assistente de pesquisa. A sua tarefa é usar a ferramenta de busca do google (google_search)
        para recuperar as últimas notícias de lançamentos muito relevantes sobre o tópico abaixo.
        stituído por outro que tenha mais.
        Qual será a função principal do seu chatbot?
1. Atendimento ao cliente (tirar dúvidas, resolver problemas)
2. Assistente virtual (agendar compromissos, fornecer informações)
3. Geração de leads (coletar informações de contato, qualificar clientes)
        """,
        description="Agente que busca informações no Google",
        tools=[google_search]
    )

    entrada_do_agente_buscador = f"Tópico: {topico}\nData de hoje: {data_de_hoje}"

    lancamentos = call_agent(buscador, entrada_do_agente_buscador)
    return lancamentos

def detalhar_objetivo(topico, lancamentos_buscados):
    planejador = Agent(
        name="detalhar_objetivo",
        model="gemini-2.0-flash",
        # Inserir as instruções do Agente Planejador #################################################
        instruction="""
        Você é um planejador de conteúdo, especialista em redes sociais. Com base na lista de
        lançamentos mais recentes e relevantes buscador, você deve:
        usar a ferramenta de busca do Google (google_search) para criar um plano sobre
        quais são os pontos mais relevantes que poderíamos abordar em um post sobre
        cada um deles. Você também pode usar o (google_search) para encontrar mais
        informações sobre os temas e aprofundar.
        Esta função fornece mais detalhes e exemplos específicos para o
    objetivo selecionado pelo usuário.
        """,
        description="Agente que planeja posts",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"Tópico:{topico}\nLançamentos buscados: {lancamentos_buscados}"
    # Executa o agente
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

def definir_publico_alvo(topico, plano_de_post):
    redator = Agent(
        name="definir_publico_alvo",
        model="gemini-2.0-flash",
        instruction="""
          Esta função coleta informações sobre o público que irá interagir
    com o chatbot, incluindo perfil demográfico, necessidades e
    expectativas, e linguagem e tom de voz adequados
            Utilize o tema fornecido no plano de post e os pontos mais relevantes fornecidos e, com base nisso,
            escreva um rascunho de post para Instagram sobre o tema indicado.
            O post deve ser engajador, informativo, com linguagem simples e incluir 2 a 4 hashtags no final.
            """,
        description="Agente redator de posts engajadores para Instagram"
    )
    entrada_do_agente_redator = f"Tópico: {topico}\nPlano de post: {plano_de_post}"
    # Executa o agente
    rascunho = call_agent(redator, entrada_do_agente_redator)
    return rascunho

def main(topico, rascunho_gerado):
    revisor = Agent(
        name="main",


          model="gemini-2.0-flash",
          instruction="""
            Você é um projetista que ira montar caixar para que o cliente possa fazer perguntas, voce usara o google_search para pesquisa,
            avera 3 opicoes de respostar acertivas,
           'O rascunho está ótimo e pronto para publicar!'.
            Caso haja problemas, aponte-os e sugira melhorias.
            """,
        description="Agente revisor de post para redes sociais."
    )
    entrada_do_agente_revisor = f"Tópico: {topico}\nRascunho: {rascunho_gerado}"
    # Executa o agente
    texto_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return texto_revisado

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("🚀 Iniciando o Sistema de Criação de Posts para Instagram com 4 Agentes 🚀")

# --- Obter o Tópico do Usuário ---
topico = input("❓ Por favor, digite o TÓPICO sobre o qual você quer criar o post de tendências: ")

# Inserir lógica do sistema de agentes ################################################
if not topico:
    print("Você esqueceu de digitar o tópico!")
else:
    print(f"Maravilha! Vamos então criar o post sobre novidades em {topico}")

    lancamentos_buscados = definir_objetivo(topico, data_de_hoje)
    print("\n--- 📝 Resultado do Agente 1 (Buscador) ---\n")
    display(to_markdown(lancamentos_buscados))
    print("--------------------------------------------------------------")

    plano_de_post = detalhar_objetivo(topico, lancamentos_buscados)
    print("\n--- 📝 Resultado do Agente 2 (Planejador) ---\n")
    display(to_markdown(plano_de_post))
    print("--------------------------------------------------------------")

    rascunho_de_post = definir_publico_alvo(topico, plano_de_post)
    print("\n--- 📝 Resultado do Agente 3 (Redator) ---\n")
    display(to_markdown(rascunho_de_post))
    print("--------------------------------------------------------------")

    post_final = main(topico, rascunho_de_post)
    print("\n--- 📝 Resultado do Agente 4 (Revisor) ---\n")
    display(to_markdown(post_final))
    print("--------------------------------------------------------------")